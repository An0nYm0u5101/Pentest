Extract Manifest and Data from the apk:

aapt -> Android Asset Packaging Tool

+] aapt l -a app.apk

+] apktool d test.apk // decompile
+] apktool b test // compile

ADB CheatSheet:

+] adb devices -> list devices
+] adb -s <device> command -> execute command over a specific device
+] adb connect ip:port -> connect to that device
+] adb install path-to-apk
+] adb push /path/to/local/file /path/on/android/device
+] adb pull /path/on/android/device /path/to/local/file
+] adb shell
+] adb shell <command>
+] adb forward tcp:<local_port> tcp:<device_port> //Forward a TCP port on the local host to a port on the device
+] adb logcat // View the device logs


shell@android:/ $ pm list packages -> ask the package manager to list all the installed packages
shell@android:/ $ pm path <package_name> -> Find the stored APK path of an installed application
shell@android:/ $ pm install /path/to/apk
shell@android:/ $ pm uninstall <package_name>
shell@android:/ $ pm disable <package_name>


logcat is a privileged tool that allows you to view system and application logs with flexible filters.
shell@android:/ $ logcat
shell@android:/ $ logcat -s tag -> If you know the name of the tag you are looking for

---------------
shell@android:/ $ getprop -> get system properties
shell@android:/ $ dumpsys -> dump status of all system information and services 
shell@android:/ $ service list


+] Drozer commands:

$ adb forward tcp:31415 tcp:31415
$ drozer console connect

dz> run app.package.list -f insecure
dz> run app.package.info -a com.android.insecurebankv2
dz> run app.package.manifest com.android.insecurebankv2
dz> run app.package.attacksurface com.android.insecurebankv2
dz> run app.activity.info -a com.android.insecurebankv2
dz> run app.activity.start --component com.android.insecurebankv2 com.android.insecurebankv2.ViewStatement

dz> run app.package.list -p android.permission.READ_SMS -> search for applications that requested an specific permission

- To find query paths of Content Providers of an APP:
dz> run app.provider.finduri com.android.insecurebankv2

- To Query content providers:
dz> run app.provider.query content://com.android.insecurebankv2.TrackUserContentProvider/trackerusers/
dz> run app.provider.query content://settings/system
dz> run app.provider.query content://sms

dz> run app.package.shareduid -u 10005  --> list applications sharing that UID


+] Look for "android:sharedUserId" among apks


+] In addition to simply starting each exposed activity, you should review the onCreate() method of each in search of conditional statements that may lead to other code paths or unexpected behavior. You can never know what kinds of Easter eggs are hiding in this method that could cause the application to perform an action that is completely out of character, like taking one of the parameters from the intents and using it as part of an operating system command that it executes.

+] Fragment Injection: All exported activities that extend PreferenceActivity and are running on Android 4.3 or prior are vulnerable. This attack was mitigated by Android in versions 4.4 onward by providing a new method in the PreferenceActivity class named isValidFragment() to allow developers to override it and validate which fragments can be loaded inside the activity. Performing poor validation on the fragment name supplied to this method or simply returning true in this method without performing any checks would still result in fragment injection attacks being possible. 

+] Content providers were the only application component that was exported by default on Android, but this situation has since been amended in API version 17. Note that the default behavior is still to export a content provider if the android:targetSdkVersion is set to a value smaller than 17, and so these issues are still prevalent.
