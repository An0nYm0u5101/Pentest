+] TODO

	WEBSOCKET BASED C2
	HTTP/2 BASED C2
	

+] Concepts/Vocabulary:

Adversary activities are described using TTPs

TTPs: Tactics, Techniques and Procedures
MITRE ATT&CK: Adversarial Tactics, Techniques & Common Knowledge
	Is a framework that serves as a central repository for adversary TTP's
	
Domain Fronting: swapping in an attacker’s host header for HTTP traffic to a high reputation website hosted behind a CDN.

Short haul C2 - Short Term Redirector -  would get caught easily.
	Are those C2 servers on which the beaconing process will continue. Whenever a system in the targeted organization executes our payload, the server will connect with the ST-C2 server. The payload will periodically poll for tasks from our C2 server, meaning that the target will call back to the ST-C2 server every few seconds. 
	
Long haul C2 - Long Term Redirector - are supposed to be more difficult to spot
	Callbacks received from the target server will be after every few hours or days. The redirector placed in front of our LT-C2 server is called a long-term (LT) redirector. This redirector is used to maintain access for a longer period of time than ST redirectors. When performing persistence via the ST-C2 server, we need to provide the domain of our LT redirector so that the persistence module running on the target server will connect back to the LT redirector instead of the ST redirector.

Tools for Adversary Emulation:
	
	Full Automated:
		RTA - Red Team Automation
		MITRE Caldera
		Infection Monkey
		
	Manual:
		Metasploit
		Empire
		Covenant
		Cobalt Strike
		
	Tracking activities and reporting:
	
		VECTR
			VECTR is a tool that facilitates tracking of your red and blue team testing activities to measure detection and prevention capabilities across different attack scenarios. VECTR provides the ability to create assessment groups, which consist of a collection of Campaigns and supporting Test Cases to simulate adversary threats. Campaigns can be broad and span activity across the kill chain, from initial compromise to privilege escalation and lateral movement and so on, or can be a narrow in scope to focus on specific detection layers, tools, and infrastructure. 
		

+] Tools:

	Seatbelt.exe (a C# tool from Specter Ops GhostPack that retrieves a lot of information from the system)
		
		
+] Commands:
	
	Get Antivirus Softwrare on Windows:
	c:\> wmic /NAMESPACE:\\root\SecurityCenter2 PATH AntiVirusProduct GET * /value







+] Red Team Infrastructure:

  For C2 and Phishing campaings:

	1. Have a hypervisor or physical machines on-premise, without being directly faced to the internet, but having internet connectivity (bonus points, set explicit egress firewall rules for these servers to the host/port that follows below).

	2. Install the C2 server of your choosing (Empire and Cobalt Strike are two common examples) on a server in your on-premise data center. We’ll assume it lives at 192.168.1.100 (non-routable) and that the C2 server binds to port 443.

	3. Procure cloud VMs of the providers of your choice. For good tradecraft, use a variety for your sophistication/emulation goals. In this example, we’ll say it lives at 2.2.2.2.

	4. Procure DNS domains (e.g. evil.com) that match these goals. Assign the DNS records to point to the cloud VM (2.2.2.2).

	5. Have the internal C2 server make an outbound SSH connection through its egress firewalls to the cloud host (2.2.2.2) and establish a REVERSE PORT FORWARD (this seems much more confusing conceptually than it is in implementation). Reverse port forwards bind a local port (e.g. port 2222 on 127.0.0.1 of the cloud VM) to send traffic across the incoming SSH connection to a port defined on the other (calling end, the server in your data center) host (e.g. port 443 on 192.168.1.100). On linux, this can be wrapped with autossh, which is handy at keeping the connection alive.

	6. On the Cloud host, create a TCP redirect from the public interface’s TCP 443 port to the localhost port 2222 so that traffic rides the SSH tunnel back to your protected on-premise C2 server. On linux, this is a single line call of socat. (Bonus points: socat has parameters to implement ingress filtering by IP range, to keep certain bots or pests off your C2 server, which is useful if you know your victim’s IP address space and it matches adversary emulation goals).

	7. On your internal on-premise host, install your SSL certificate, signed by the certificate authority of your choosing. Remember you will use the external DNS (e.g. evil.com) for the common name of the certificate. This way all traffic from victim endpoints will flow through the TCP redirector and be decrypted only on the on-premise server. Never install the certificate/private key on the cloud host or use unencrypted protocols (e.g. HTTP) with this setup or the cloud host provider will have access to your target victim’s data.


“Break your infrastructure into categories based on purpose”. Categories:

	Stage 0 (Staging) – Phishing and initial code execution
	Stage 1 (Persistence) – Maintaining access to an environment
	Stage 2 (Interactive) – Active exploitation, enumeration, and escalation
	Stage 3 (Exfiltration) – Data extraction and impact
	
Other categories:	
	Phishing SMTP
	Phishing payloads
	Long-term command and control (C2)
	Short-term C2
	
	
	
If instead of using a reverse ssh connection, the forward is direct and our C2 is exposed:

	To protect our C2 server from outside scanning and recon, let’s set the following Uncomplicated Firewall (UFW) ruleset so that only our redirector can connect to our REDIRECTOR-1. To begin, execute the following UFW commands to add firewall rules for C2:

			sudo ufw allow 22
			sudo ufw allow 55553
			sudo ufw allow from <IP-OF-REDIRECTOR2> to any port 8080 proto tcp
			sudo ufw allow out to <IP-OF-REDIRECTOR2> port 8080 proto tcp
			sudo ufw deny out to any
		
	
- Automation with either Ansible, Chef, Puppet, Terraform


- Tunneling options:

	- Socat – Easy-to-use, but higher in the OS than we’d prefer. It can also get complicated when trying to support lots of ports simultaneously.
	
	- IPTables – Tricky to configure correctly, but very powerful with almost no dependencies.
	
	- Reverse Proxy – Provides advanced selective routing in layer 7, but requires software, certificates, and configuration on the endpoint.
	
	
- Collect certificates using certbot:

	$ sudo apt-get install certbot
	$ sudo certbot certonly --standalone -d spoofdomain.com -d www.spoofdomain.com
	
	If there are no generation issues, the cert files will be saved to /etc/letsencrypt/live/spoofdomain.com.
	
	
- Domains
	Categorization - Every domain used in your attack infrastructure setup should be categorized, unless you are simulating an adversary who does not use categorized domains. Domain categorization can instantly increase the apparent reputation of your social engineering campaigns or C2 traffic.
	
	Pre-categorized vs. Home-grown - There are two primary methods of getting ahold of categorized domains. The first is to purchase domains that have already been used legitimately and gone through web categorization before. The categorization remains in place until a domain is submitted for re-rating, such as by the blue team during the assessment. The other method is to buy uncategorized or new domains and get them categorized yourself. Typically, this is done by buying multiple domains, redirecting requests to a fake page masquerading as a page within the target web category, and submitting the domain to multiple categorization engines. The benefit of this method over buying pre-categorized domains is that you can buy exactly the domain you want, rather than relying on the available supply, and age the domains longer than is typically done with pre-categorized domains. However, this method comes at an increased money and time resource cost.	
	
	expireddomains.net is a search engine for recently expired or dropped domains. It provides search and advanced filtering, such as age of expiration, number of backlinks, number of Archive.org snapshots, SimilarWeb score. Using the site, we can register pre-used domains, which will come with domain age, that look similar to our target, look similar to our impersonation, or simply are likely to blend in on our target’s network.
	When choosing a domain for C2 or data exfiltration, consider choosing a domain categorized as Finance or Healthcare. Many organizations will not perform SSL middling on those categories due to the possibility of legal or data sensitivity issues. It is also important to ensure your chosen domain is not associated with any previous malware or phishing campaigns.
	
		expireddomains.net credentials:
			Username: vipet82748
			Password: vipet82748@zjexmail.com
			email: vipet82748@zjexmail.com
						
	
	https://github.com/threatexpress/domainhunter
	https://github.com/elceef/dnstwist.git
	
	
	Services for categorization:
	
		https://sitereview.bluecoat.com/#/
		https://urlfiltering.paloaltonetworks.com/query/
		https://tools.zvelo.com
		https://url.fortinet.net/rate/submit.php
		https://uflfiltering.paloaltonetworks.com/TestASite.aspx
		https://www.trustedsource.org/en/feedback/url
		https://www.watchguard.com/securityportal/UrlCategorization.aspx
	
	
- SMTP

Ideally, your SMTP server (or service) will not reside on the same host as your phishing origination. This allows you to use the same origination platform across all campaigns, rather than needing to deploy the platform for each new phishing campaign.


# Generate an ssh key to use as aws_key pair
ssh-keygen -t rsa
chmod 400 examplekey


+] Nginx Setup

sudo apt update
sudo apt install nginx

sudo ufw app list
sudo ufw status
sudo ufw allow 'Nginx Full'

sudo systemctl stop nginx
sudo systemctl start nginx
sudo systemctl restart nginx
sudo systemctl reload nginx
sudo systemctl disable nginx
sudo systemctl enable nginx

export domain=example.io

sudo mkdir -p /var/www/html
sudo chown -R $USER:$USER /var/www/html
sudo chmod -R 755 /var/www/

sudo mkdir /var/log/nginx



$ sudo apt-get install certbot


$ sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.$domain -d $domain --email noreply@live.com

		"""
		$ sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d *.$domain --email noreply@live.com
		Saving debug log to /var/log/letsencrypt/letsencrypt.log
		Plugins selected: Authenticator manual, Installer None
		Obtaining a new certificate
		Performing the following challenges:
		dns-01 challenge for asd.social

		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		NOTE: The IP of this machine will be publicly logged as having requested this
		certificate. If you're running certbot in manual mode on a machine that is not
		your server, please ensure you're okay with that.

		Are you OK with your IP being logged?
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		(Y)es/(N)o: Y

		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		Please deploy a DNS TXT record under the name
		_acme-challenge.asd.social with the following value:

		2JCBNKlasQQMAHS21KlpYgF2t56ctBxjYbtYfDSbNMI

		Before continuing, verify the record is deployed.
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

		
When putting the DNS TXT record on goddady, for some reason we had to put _acme-challenge.asd.social. instead of simply _acme-challenge as the TXT record NAME.
		
c:\> nslookup
> set q=txt
> _acme-challenge.asd.social
Server:  [8.8.8.8]
Address:  8.8.8.8

Non-authoritative answer:
_acme-challenge.asd.social  text =

        "2JCBNKlasQQMAHS21KlpYgF2t56ctBxjYbtYfDSbNMI"
>
	
		
		Press Enter to Continue
		Waiting for verification...
		Cleaning up challenges

		IMPORTANT NOTES:
		 - Congratulations! Your certificate and chain have been saved at:
		   /etc/letsencrypt/live/asd.social/fullchain.pem
		   Your key file has been saved at:
		   /etc/letsencrypt/live/asd.social/privkey.pem
		   Your cert will expire on 2020-06-23. To obtain a new or tweaked
		   version of this certificate in the future, simply run certbot
		   again. To non-interactively renew *all* of your certificates, run
		   "certbot renew"
		 - If you like Certbot, please consider supporting our work by:

		   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
		   Donating to EFF:                    https://eff.org/donate-le
		"""




server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl_certificate  /etc/letsencrypt/live/example.io/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/example.io/privkey.pem;

        access_log /var/log/nginx/nginx.vhost.access.log;
        error_log /var/log/nginx/nginx.vhost.error.log;

        root /var/www/html;

        index index.html;

        server_name *.example.io;

        location / {
                proxy_pass https://www.example.com:443/;
				proxy_redirect off;
                proxy_ssl_verify off;
        }
		
		location /1fxi2sbjiw0xkg0rh6404fjayiygbz261s3mtdoszqumo {        
                proxy_pass https://127.0.0.1:1337;
                proxy_redirect off;
                proxy_ssl_verify off;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
}


Run reverse tunnel:
sudo ssh -i /tmp/Team.pem -R 127.0.0.1:1337:localhost:1337 ubuntu@3.101.16.x

Run reverse tunnel in screen with autossh:

screen sudo autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -i Team.pem  -R 127.0.0.1:1337:localhost:1337 ubuntu@3.101.16.x
    
    


+] +++ Covenant +++

To use SSL in the HTTP grunt, we need to provide to Covenant the certificate in pfx format:

	$ openssl pkcs12 -export -out certificate.pfx -inkey privkey.pem -in cert.pem -certfile chain.pem


	
+] NATed DNS Forwarding for C2

At the C2 on prem:
	
	socat -t0 -T0 tcp-listen:1337,reuseaddr,fork UDP:localhost:53
	ssh -R 1337:localhost:1337 ubuntu@redirector
	
At Redirector:

	socat -t0 -T0 udp4-recvfrom:53,reuseaddr,fork tcp:localhost:1337
	

	
	
What's left:

Move communications to HTTPS;
Categorise the domain we own;
Implement some form of Domain Fronting to serve content using a CDN like CloudFront;

	
	
+] Resources:
https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki
https://mitre-attack.github.io/attack-navigator/enterprise/
https://github.com/infosecn1nja/Red-Teaming-Toolkit




