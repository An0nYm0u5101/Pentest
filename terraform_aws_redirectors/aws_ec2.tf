provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region     = "${var.region}"
}

resource "aws_key_pair" "default" {
  key_name   = "${var.aws_key_pair_name}"
  public_key = "${file("${var.aws_ec2_ssh_pub_key}")}"
}

resource "aws_security_group" "default" {
  name        = "web_security_group"
  description = "Used in the terraform"  

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web_redirector" {
  ami           = "${lookup(var.amis, var.region)}"
  instance_type = "t2.micro"
  
  key_name = "${aws_key_pair.default.key_name}"
  
  security_groups = ["${aws_security_group.default.name}"]
  
  connection {
    type        = "ssh"
    user        = "ubuntu"
    private_key = "${file("${var.aws_ec2_ssh_priv_key}")}"
    host        = self.public_ip
  }
  
  provisioner "local-exec" {
    command = "echo ${aws_instance.web_redirector.public_ip} > ip_address.txt"
  }
  
  provisioner "remote-exec" {
    inline = [	
      "sudo apt update",
      "sudo apt install -y nginx",
      "sudo systemctl start nginx",
	  "sudo ufw allow 'Nginx Full'",
	  "sudo mkdir -p /var/www/html",
	  "sudo chown -R $USER:$USER /var/www/html",
	  "sudo chmod -R 755 /var/www/"	  
    ]
  }
  
  provisioner "file" {
    source      = "nginx_vhost.config"
    destination = "/home/ubuntu"
  }
}

// add elstic IP
//resource "aws_eip" "ip" {
//    vpc = false
//   instance = aws_instance.web_redirector.id
//}



